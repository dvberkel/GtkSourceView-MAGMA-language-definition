<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Daan van Berkel <daan.v.berkel.1980@gmail.com>
 Copyright (C) 2010-2011 Daan van Berkel <daan.v.berkel.1980@gmail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="magma" _name="MAGMA" version="2.0" _section="Scientific">
	<metadata>
		<property name="globs">*.m;*.magma</property>
		<property name="line-comment-start">//</property>
		<property name="block-comment-start">/*</property>
		<property name="block-comment-end">*/</property>
	</metadata>
	
	<styles>
		<style id="comment"  _name="Comment"  map-to="def:comment"/>
		<style id="keyword"  _name="Keyword"  map-to="def:keyword"/>
		<style id="operator" _name="Operator" map-to="def:operator"/>
		<style id="function" _name="Function" map-to="def:function"/>
		<style id="identifier" _name="identifier" map-to="def:identifier"/>
	</styles>
	
	<definitions>
		<define-regex id="keyword" extended="true">
			\%[(_ |
			adj |
			and |
			assert |
			assigned |
			break |
			by |
			case |
			catch |
			cat |
			clear |
			cmpeq |
			cmpne |
			continue |
			declare |
			default |
			delete |
			diff |
			div |
			do |
			elif |
			else |
			end |
			eq |
			error |
			eval |
			exists |
			exit |
			false |
			for |
			forall |
			forward |
			fprintf |
			freeze |
			function |
			ge |
			gt |
			if |
			iload |
			import |
			intrinsic |
			in |
			is |
			join |
			le |
			load |
			local |
			lt |
			meet |
			mod |
			ne |
			not |
			notadj |
			notin |
			notsubset |
			or |
			printf |
			print |
			procedure |
			quit |
			random |
			read |
			readi |
			repeat |
			requirerange |
			requirege |
			require |
			restore |
			return |
			save |
			sdiff |
			select |
			subset |
			then |
			time |
			to |
			true |
			try |
			until |
			vprintf |
			vprint |
			vtime |
			when |
			where |
			while |
			xor)\%]
		</define-regex>
	
		<context id="keyword" style-ref="keyword">
			<match>\%{keyword}</match>
		</context>
		
		<context id="line-comment" style-ref="comment">
			<start>//</start>
			<end>$</end>
			<include>
				<context ref="def:in-comment"/>
			</include>
		</context>

		<context id="multiline-comment" style-ref="comment">
			<start>/\*</start>
			<end>\*/</end>
			<include>
				<context ref="def:in-comment"/>
			</include>
		</context>

		<define-regex id="operator" extended="true">
			\! | \~ | \\ | \+ | \- |
			\* | / | % |
			\| | \^ | \# |
			\.\. |
			\*= | \+= | \-=
		</define-regex>

		<context id="operator" style-ref="operator">
			<match>\%{operator}</match>
		</context>

		<context id="function" style-inside="false" style-ref="function">
			<start>\[%\w+\(</start>
			<end>\)</end>
			<include>
				<context ref="magma"/>
			</include>
		</context>
		
		<define-regex id="identifier">\%[[a-zA-Z][a-zA-Z0-9_]*</define-regex>
		
		<context id="identifier" style-ref="identifier">
			<match>\%{identifier}</match>
		</context>
		
		<context id="magma">
			<include>
				<context ref="def:string"/>
				<context ref="line-comment"/>
				<context ref="multiline-comment"/>
				<context ref="keyword"/>
				<context ref="def:decimal"/>
				<context ref="def:float"/>
				<context ref="operator"/>
				<context ref="function"/>
				<context ref="identifier"/>
			</include>
		</context>
	</definitions>
</language>
